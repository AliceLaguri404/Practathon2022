#include<iostream>
#include <random>
#include<queue>
#include <time.h>
#include <bits/stdc++.h>
using namespace std;
#define n 10000000
#define D 100
int main()
{
    std::default_random_engine generator;
    std::normal_distribution<double> distribution(0.0, 100.0);
    vector<vector<float>> allPoints;
    vector<float> pointToCheck;
    vector<vector<float>> nearestTenPoints; // nearestTenPoints vector will be the final vectors with 10 nearest vector data
    priority_queue<vector<float>> maxHeap; // keep track of sum and index of narest ten vectors
    for(int i=0;i<n;i++)
    {   
        vector<float> v1;
        for(int j=0;j<D;j++)
        {
            v1.push_back((float)distribution(generator));
        }    
        allPoints.push_back(v1);
    }
    for(int i=0;i<D;i++)
    {
        pointToCheck.push_back((float)distribution(generator));
    }
    clock_t start, end;
    start = clock();
    for(int i=0;i<10;i++)
    {
        int sum=0;
        nearestTenPoints.push_back(allPoints[i]);
        for(int j=0;j<D;j++)
        {
            int absVal = allPoints[i][j]-pointToCheck[j];
            absVal = absVal<0?-1*absVal:absVal;
            sum=sum+absVal;
        }
        vector<float> sumItem;
        sumItem.push_back(sum);
        sumItem.push_back(i);
        maxHeap.push(sumItem);
    }
    
    for(int i=10;i<n;i++)
    {
        int sum=0;
        for(int j=0;j<D;j++)
        {
            int absVal = allPoints[i][j]-pointToCheck[j];
            absVal = absVal<0?-1*absVal:absVal;
            sum=sum+absVal;
        }
        if(sum<maxHeap.top()[0])
        {
            vector<float> sumItem;
            int index = maxHeap.top()[1];
            nearestTenPoints[index] = allPoints[i];
            maxHeap.pop();
            sumItem.push_back(sum);
            sumItem.push_back(index);
            maxHeap.push(sumItem);
        }
    }
    end = clock();
    double time_taken = double(end-start)/double(CLOCKS_PER_SEC);
    cout<< "Time taken to execute " <<time_taken<<setprecision(5)<<" sec" << endl;
}
